#+TITLE: Trabalhando com serviços de mensageria real time com Python e Kafka na prática


* Introdução a Micro Serviços
Existem diferentes tipos de arquiteturas.
** Monolito
Ex: Banco + Aplicação (front + back) tudo no mesmo servidor.
*** Desvantagens
- Forte acoplamento entre diferentes módulos e responsabilidades
*** Vantagens
- Comunicação simplificada entre componentes do sistema
** Micro Serviços
O sistema é dividido em diversos "módulos" (diversas partes/serviços).
*** Desvantagens
- Complexidade em coordenar a comunicação de diferentes servidores/serviços
- Comunicação pode gerar acoplamento entre os módulos
  - Contudo, esse ponto pode ser solucionado através de um serviço de mensageria!
*** Vantagens
- Isolamento de responsabilidades
  - Melhor manutenibilidade/sustentação
- Controle granulirizado da escala de cada um dos serviços
  - Escalabilidade facilitada

** Conclusão
[[http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html][Não existe almoço grátis.]]

Talvez um ponto controverso, mas que vale a pena ser considerado: [[https://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html][micro serviços não são um tipo de arquitetura.]]

* Kafka
Sistema de mensageria Open Source.

#+BEGIN_QUOTE
Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.
#+END_QUOTE

#+html: <p align="center"> <figure>
#+html: <img src="figuras/kafka_ex.png" />
#+html: <figcaption>Visão geral dos componentes Kafka. Créditos: <a href="https://medium.com/@kavimaluskam/start-your-real-time-pipeline-with-apache-kafka-39e30129892a">kavimaluskam@medium</a> </figcaption>
#+html: </figure> </p>

*** Producers
Geram mensagens, que são enviadas para uma fila (mais especificamente tópicos, no Kafka), a serem lidas por Consumers.

#+BEGIN_SRC python
topic = 'topic-name'

# Consumer configuration
# See https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md
conf = {
    'bootstrap.servers': servers,
    'group.id': group_id,
    'session.timeout.ms': 6000,
    'default.topic.config': {'auto.offset.reset': 'smallest'},
    'security.protocol': 'SASL_SSL',
    'sasl.mechanisms': 'SCRAM-SHA-256',
    'sasl.username': username,
    'sasl.password': password,
}
p = Producer(conf)

try:
    p.produce(topic, "my message new 2", callback=delivery_callback)
except BufferError as e:
    print('%% Local producer queue is full (%d messages awaiting delivery): try again\n',
          len(p))
p.poll(0)

print('%% Waiting for %d deliveries\n' % len(p))
p.flush()
#+END_SRC

*** Consumers
Subscrevem a determinadas filas (tópicos) e continuamente consomem as mensagens geradas pelo Producer

#+BEGIN_SRC python
topics = ['topic-name']

# Consumer configuration
# See https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md
conf = {
    'bootstrap.servers': servers,
    'group.id': group_id,
    'session.timeout.ms': 6000,
    'default.topic.config': {'auto.offset.reset': 'smallest'},
    'security.protocol': 'SASL_SSL',
    'sasl.mechanisms': 'SCRAM-SHA-256',
    'sasl.username': username,
    'sasl.password': password,
}

c = Consumer(conf)
c.subscribe(topics)
try:
    while True:
        msg = c.poll(timeout=1.0)
        if msg is None:
            continue
        if msg.error():
            # Error or event
            if msg.error().code() == KafkaError._PARTITION_EOF:
                # End of partition event
                sys.stderr.write('%% %s [%d] reached end at offset %d\n' %
                                 (msg.topic(), msg.partition(), msg.offset()))
            elif msg.error():
                # Error
                raise KafkaException(msg.error())
        else:
            # Proper message
            sys.stderr.write('%% %s [%d] at offset %d with key %s:\n' %
                             (msg.topic(), msg.partition(), msg.offset(),
                              str(msg.key())))
            print(msg.value())

except KeyboardInterrupt:
    sys.stderr.write('%% Aborted by user\n')

# Close down consumer to commit final offsets.
c.close()
#+END_SRC

** Kafka as a Service
Karafka - Managed Apache Kafka Cluster

https://www.cloudkarafka.com/

5 tópicos grátis (free-tier)

* Recursos
https://github.com/huguinho-alves/python_aceleracao_everys

[[https://medium.com/@kavimaluskam/start-your-real-time-pipeline-with-apache-kafka-39e30129892a][Start your real-time pipeline with Apache Kafka]]

[[https://stackoverflow.com/questions/4127241/orchestration-vs-choreography#:~:text=The%20choreography%20describes%20the%20interactions,the%20services%20involved%20should%20reside.][Orchestration vs. Choreography]]

[[http://highscalability.com/blog/2014/4/8/microservices-not-a-free-lunch.html][Microservices - Not A Free Lunch!]]

[[https://blog.cleancoder.com/uncle-bob/2014/10/01/CleanMicroserviceArchitecture.html][Clean Micro-service Architecture]]
